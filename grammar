program = block <EOF>

block = { ident "is" type "."}
	{ ident "," ident {"," ident} "are" type "."}
	{ "type" ident ["is" ident] ":"
		{"property" ident "is" type "."}
		{("operation"|"override") function_sign "."} }
        {function_dec} statement {statement}

function_dec = "dec" function_sign "."

function_sign = ident dec_param_list [":" type] "->" block

statement = [ ident "<-" expression |
            "if" condition "," statement {statement}
		["else if" condition "," statement {statement}]
		["else" statement {statement}] |
	    "match" expression ":"
		{ number "," statement {statement} }
		"," statement {statement} |
	    "foreach" ident "in" ident statement {statement} |
            "repeat" statement {statement} "until" condition |
	    "repeat" statement {statement} (ident|number) "times" |
	    "return" expression |
	    "incr" ident |
	    "decr" ident |
	    expression |
	    comment |
	    "breakpoint" ] "." "\n"

condition = expression ("eq"|"neq"|"<"|"<="|">"|">=") expression

expression = [ "+"|"-"|"not"] term { ("+"|"-"|"not") term} |
	     ident"'"ident |
	     function_call |
             lambda

lambda = "[" dec_param_list [":" type] "]" "->" block "."

function_call = ident call_param_list

dec_param_list = [type ident {"," type ident}]

call_param_list = [factor {factor}]

term = factor {("*"|"/"|"mod"|"and"|"or") factor}

factor = ident | number | "(" expression ")"

type = "int" | "bool" | "char" | "float" | "vector of" number type

comment = "@" text "@" | "#" text
